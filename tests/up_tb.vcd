$date
	Fri Jan 19 15:48:55 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module processor_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var integer 32 # i [31:0] $end
$scope module P $end
$var wire 1 ! clk_in $end
$var wire 1 " rst_in $end
$var wire 1 $ rst_id $end
$var wire 24 % rom_data [23:0] $end
$var wire 1 & rf_en $end
$var wire 16 ' reg_out [15:0] $end
$var wire 1 ( r_or_w $end
$var wire 16 ) pc_bits [15:0] $end
$var wire 8 * op [7:0] $end
$var wire 16 + mux_out [15:0] $end
$var wire 1 , ldi $end
$var wire 1 - jmp_en $end
$var wire 1 . alu_zero $end
$var wire 1 / alu_overflow $end
$var wire 16 0 alu_out [15:0] $end
$var wire 16 1 acu_out [15:0] $end
$var wire 1 2 acu_en $end
$var reg 1 3 rst $end
$scope module Accumulator $end
$var wire 1 ! clk $end
$var wire 16 4 in [15:0] $end
$var wire 1 2 ce $end
$var parameter 32 5 WIDTH $end
$var reg 16 6 out [15:0] $end
$upscope $end
$scope module Alu $end
$var wire 1 7 funct $end
$var wire 8 8 op [7:0] $end
$var wire 16 9 in2 [15:0] $end
$var wire 16 : in1 [15:0] $end
$var parameter 32 ; WIDTH $end
$var reg 16 < out [15:0] $end
$var reg 1 / overflow $end
$var reg 1 . zero $end
$upscope $end
$scope module InstructionDecoder $end
$var wire 8 = instr [7:0] $end
$var parameter 32 > INSTR_WIDTH $end
$var parameter 32 ? OP_WIDTH $end
$var reg 1 2 acu_en $end
$var reg 1 - jmp_en $end
$var reg 1 , ldi $end
$var reg 8 @ op [7:0] $end
$var reg 1 ( r_or_w $end
$var reg 1 & rf_en $end
$var reg 1 $ rst $end
$upscope $end
$scope module Mux $end
$var wire 16 A in1 [15:0] $end
$var wire 16 B in2 [15:0] $end
$var wire 1 , sel $end
$var parameter 32 C WIDTH $end
$var reg 16 D out [15:0] $end
$upscope $end
$scope module ProgramCounter $end
$var wire 1 ! clk $end
$var wire 16 E jmp_addr [15:0] $end
$var wire 1 - jmp_en $end
$var wire 1 3 rst $end
$var reg 16 F pc [15:0] $end
$upscope $end
$scope module Registers $end
$var wire 1 ! clk $end
$var wire 16 G in [15:0] $end
$var wire 1 ( r_or_w $end
$var wire 16 H reg_addr [15:0] $end
$var wire 1 & rf_en $end
$var parameter 32 I REG_NUM $end
$var parameter 32 J WIDTH $end
$var reg 16 K out [15:0] $end
$upscope $end
$scope module Rom $end
$var wire 16 L addr [15:0] $end
$var parameter 32 M RAM_ADDR_BITS $end
$var parameter 32 N RAM_WORD_WIDTH $end
$var reg 24 O data [23:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11000 N
b100 M
b10000 J
b10000 I
b10000 C
b100 ?
b10 >
b10000 ;
b10000 5
$end
#0
$dumpvars
b11000000000000000000 O
b0 L
bz K
bz H
b0 G
b0 F
bz E
b0 D
b0 B
b0 A
b1100 @
b1100 =
b0 <
b0 :
bz 9
b1100 8
z7
b0 6
b0 4
03
02
b0 1
b0 0
x/
1.
0-
0,
b0 +
b1100 *
b0 )
0(
bz '
0&
b11000000000000000000 %
0$
b0 #
0"
1!
$end
#1000
0.
b101 0
b101 4
b101 <
b101 +
b101 :
b101 D
1,
12
b1101 *
b1101 8
b1101 @
b101 B
b1101 =
b11010000000000000101 %
b11010000000000000101 O
b1 )
b1 F
b1 L
b1 #
0!
#2000
b10 #
1!
#3000
1.
b0 0
b0 4
b0 <
b1 H
b101 +
b101 :
b101 D
0,
1(
1&
02
b1011 *
b1011 8
b1011 @
b1 B
b1011 =
b10110000000000000001 %
b10110000000000000001 O
b101 1
b101 6
b101 A
b101 G
b10 )
b10 F
b10 L
b11 #
0!
#4000
b100 #
1!
#5000
0.
b11 +
b11 :
b11 D
b11 0
b11 4
b11 <
1,
0(
0&
12
b1101 *
b1101 8
b1101 @
bz H
b11 B
b1101 =
b11010000000000000011 %
b11010000000000000011 O
b11 )
b11 F
b11 L
b101 #
0!
#6000
b110 #
1!
#7000
0.
b101 '
b101 9
b101 K
b1000 0
b1000 4
b1000 <
b1 H
b11 +
b11 :
b11 D
0,
1&
b101 *
b101 8
b101 @
b1 B
b101 =
b1010000000000000001 %
b1010000000000000001 O
b11 1
b11 6
b11 A
b11 G
b100 )
b100 F
b100 L
b111 #
0!
#8000
b1000 #
1!
#9000
1.
bz '
bz 9
bz K
1(
02
b1011 *
b1011 8
b1011 @
b0 0
b0 4
b0 <
b10 H
b10 B
b1011 =
b10110000000000000010 %
b10110000000000000010 O
b1000 +
b1000 :
b1000 D
b101 )
b101 F
b101 L
b1000 1
b1000 6
b1000 A
b1000 G
b1001 #
0!
#10000
b1010 #
1!
#11000
0(
0&
b1100 *
b1100 8
b1100 @
bz H
b0 B
b1100 =
b11000000000000000000 %
b11000000000000000000 O
b110 )
b110 F
b110 L
b1011 #
0!
#12000
b1100 #
1!
#13000
b111 )
b111 F
b111 L
b1101 #
0!
#14000
b1110 #
1!
#15000
0.
b1000 '
b1000 9
b1000 K
b1000 0
b1000 4
b1000 <
b10 H
1&
12
b1010 *
b1010 8
b1010 @
b10 B
b1010 =
b10100000000000000010 %
b10100000000000000010 O
b1000 )
b1000 F
b1000 L
b1111 #
0!
#16000
b10000 #
1!
#17000
bz '
bz 9
bz K
b1001 0
b1001 4
b1001 <
0&
b1001 *
b1001 8
b1001 @
bz H
b0 B
b1001 =
b10010000000000000000 %
b10010000000000000000 O
b1001 )
b1001 F
b1001 L
b10001 #
0!
#18000
b10010 #
1!
#19000
1.
b1001 E
02
1-
b1110 *
b1110 8
b1110 @
b0 0
b0 4
b0 <
b1001 B
b1110 =
b1001 +
b1001 :
b1001 D
b11100000000000001001 %
b11100000000000001001 O
b1001 1
b1001 6
b1001 A
b1001 G
b1010 )
b1010 F
b1010 L
b10011 #
0!
#20000
b10100 #
1!
#21000
0.
b1010 0
b1010 4
b1010 <
12
0-
b1001 *
b1001 8
b1001 @
bz E
b0 B
b1001 =
b10010000000000000000 %
b10010000000000000000 O
b1001 )
b1001 F
b1001 L
b10101 #
0!
#22000
b10110 #
1!
#23000
1.
b1001 E
02
1-
b1110 *
b1110 8
b1110 @
b0 0
b0 4
b0 <
b1001 B
b1110 =
b1010 +
b1010 :
b1010 D
b11100000000000001001 %
b11100000000000001001 O
b1010 1
b1010 6
b1010 A
b1010 G
b1010 )
b1010 F
b1010 L
b10111 #
0!
#24000
b11000 #
1!
#25000
0.
b1011 0
b1011 4
b1011 <
12
0-
b1001 *
b1001 8
b1001 @
bz E
b0 B
b1001 =
b10010000000000000000 %
b10010000000000000000 O
b1001 )
b1001 F
b1001 L
b11001 #
0!
#26000
b11010 #
1!
#27000
1.
b1001 E
02
1-
b1110 *
b1110 8
b1110 @
b0 0
b0 4
b0 <
b1001 B
b1110 =
b1011 +
b1011 :
b1011 D
b11100000000000001001 %
b11100000000000001001 O
b1011 1
b1011 6
b1011 A
b1011 G
b1010 )
b1010 F
b1010 L
b11011 #
0!
#28000
b11100 #
1!
#29000
0.
b1100 0
b1100 4
b1100 <
12
0-
b1001 *
b1001 8
b1001 @
bz E
b0 B
b1001 =
b10010000000000000000 %
b10010000000000000000 O
b1001 )
b1001 F
b1001 L
b11101 #
0!
#30000
b11110 #
1!
#31000
1.
b1001 E
02
1-
b1110 *
b1110 8
b1110 @
b0 0
b0 4
b0 <
b1001 B
b1110 =
b1100 +
b1100 :
b1100 D
b11100000000000001001 %
b11100000000000001001 O
b1100 1
b1100 6
b1100 A
b1100 G
b1010 )
b1010 F
b1010 L
b11111 #
0!
#32000
b100000 #
1!
#33000
0.
b1101 0
b1101 4
b1101 <
12
0-
b1001 *
b1001 8
b1001 @
bz E
b0 B
b1001 =
b10010000000000000000 %
b10010000000000000000 O
b1001 )
b1001 F
b1001 L
b100001 #
0!
#34000
b100010 #
1!
#35000
1.
b1001 E
02
1-
b1110 *
b1110 8
b1110 @
b0 0
b0 4
b0 <
b1001 B
b1110 =
b1101 +
b1101 :
b1101 D
b11100000000000001001 %
b11100000000000001001 O
b1101 1
b1101 6
b1101 A
b1101 G
b1010 )
b1010 F
b1010 L
b100011 #
0!
#36000
b100100 #
1!
#37000
0.
b1110 0
b1110 4
b1110 <
12
0-
b1001 *
b1001 8
b1001 @
bz E
b0 B
b1001 =
b10010000000000000000 %
b10010000000000000000 O
b1001 )
b1001 F
b1001 L
b100101 #
0!
#38000
b100110 #
1!
#39000
1.
b1001 E
02
1-
b1110 *
b1110 8
b1110 @
b0 0
b0 4
b0 <
b1001 B
b1110 =
b1110 +
b1110 :
b1110 D
b11100000000000001001 %
b11100000000000001001 O
b1110 1
b1110 6
b1110 A
b1110 G
b1010 )
b1010 F
b1010 L
b100111 #
0!
#40000
b101000 #
1!
#41000
0.
b1111 0
b1111 4
b1111 <
12
0-
b1001 *
b1001 8
b1001 @
bz E
b0 B
b1001 =
b10010000000000000000 %
b10010000000000000000 O
b1001 )
b1001 F
b1001 L
b101001 #
0!
#42000
b101010 #
1!
#43000
1.
b1001 E
02
1-
b1110 *
b1110 8
b1110 @
b0 0
b0 4
b0 <
b1001 B
b1110 =
b1111 +
b1111 :
b1111 D
b11100000000000001001 %
b11100000000000001001 O
b1111 1
b1111 6
b1111 A
b1111 G
b1010 )
b1010 F
b1010 L
b101011 #
0!
#44000
b101100 #
1!
#45000
0.
b10000 0
b10000 4
b10000 <
12
0-
b1001 *
b1001 8
b1001 @
bz E
b0 B
b1001 =
b10010000000000000000 %
b10010000000000000000 O
b1001 )
b1001 F
b1001 L
b101101 #
0!
#46000
b101110 #
1!
#47000
1.
b1001 E
02
1-
b1110 *
b1110 8
b1110 @
b0 0
b0 4
b0 <
b1001 B
b1110 =
b10000 +
b10000 :
b10000 D
b11100000000000001001 %
b11100000000000001001 O
b10000 1
b10000 6
b10000 A
b10000 G
b1010 )
b1010 F
b1010 L
b101111 #
0!
#48000
b110000 #
1!
#49000
0.
b10001 0
b10001 4
b10001 <
12
0-
b1001 *
b1001 8
b1001 @
bz E
b0 B
b1001 =
b10010000000000000000 %
b10010000000000000000 O
b1001 )
b1001 F
b1001 L
b110001 #
0!
#50000
b110010 #
1!
#60000
