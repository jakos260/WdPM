$date
	Tue Feb 13 01:27:53 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module processor_tb $end
$var wire 1 ! d2 $end
$var wire 1 " d3 $end
$var wire 1 # d1 $end
$var wire 1 $ d0 $end
$var reg 1 % clk $end
$var reg 1 & rst $end
$var integer 32 ' i [31:0] $end
$scope module P $end
$var wire 1 % clk_in $end
$var wire 1 ! d2_io $end
$var wire 1 " d3_io $end
$var wire 1 & rst_in $end
$var wire 1 ( stack_push $end
$var wire 1 ) stack_pop $end
$var wire 1 * stack_full $end
$var wire 1 + stack_empty $end
$var wire 1 , rst_id $end
$var wire 24 - rom_data [23:0] $end
$var wire 16 . rf_io_out [15:0] $end
$var wire 1 / rf_en $end
$var wire 8 0 ret_addr [7:0] $end
$var wire 16 1 reg_out [15:0] $end
$var wire 1 2 r_or_w $end
$var wire 8 3 pc_bits [7:0] $end
$var wire 8 4 op [7:0] $end
$var wire 1 5 ldi $end
$var wire 1 6 jmp_en $end
$var wire 16 7 io_out [15:0] $end
$var wire 1 8 io_en $end
$var wire 1 # d1_io $end
$var wire 1 $ d0_io $end
$var wire 1 9 alu_overflow $end
$var wire 16 : alu_out [15:0] $end
$var wire 1 ; acu_zero $end
$var wire 16 < acu_rom_out [15:0] $end
$var wire 16 = acu_out [15:0] $end
$var wire 1 > acu_en $end
$var reg 16 ? out [15:0] $end
$var reg 1 @ rst $end
$scope module Accumulator $end
$var wire 1 % clk $end
$var wire 1 ; zero $end
$var wire 16 A in [15:0] $end
$var wire 1 > ce $end
$var parameter 32 B WIDTH $end
$var reg 16 C out [15:0] $end
$upscope $end
$scope module Alu $end
$var wire 8 D op [7:0] $end
$var wire 16 E in2 [15:0] $end
$var wire 16 F in1 [15:0] $end
$var parameter 32 G WIDTH $end
$var reg 16 H out [15:0] $end
$var reg 1 9 overflow $end
$upscope $end
$scope module IO_Ports $end
$var wire 1 % clk $end
$var wire 1 ! d2_io $end
$var wire 1 " d3_io $end
$var wire 16 I data_in [15:0] $end
$var wire 1 J direction $end
$var wire 4 K io_addr [3:0] $end
$var wire 1 2 r_or_w $end
$var wire 1 8 en $end
$var wire 1 L d3_out $end
$var wire 1 M d2_out $end
$var wire 1 N d1_out $end
$var wire 1 # d1_io $end
$var wire 1 O d0_out $end
$var wire 1 $ d0_io $end
$var parameter 32 P BITS $end
$var reg 16 Q data_out [15:0] $end
$scope module D0 $end
$var wire 1 % clk $end
$var wire 1 R data_in $end
$var wire 1 O data_out $end
$var wire 1 J direction $end
$var wire 1 S en $end
$var wire 1 $ io_port $end
$var reg 1 T a $end
$var reg 1 U b $end
$upscope $end
$scope module D1 $end
$var wire 1 % clk $end
$var wire 1 V data_in $end
$var wire 1 N data_out $end
$var wire 1 J direction $end
$var wire 1 W en $end
$var wire 1 # io_port $end
$var reg 1 X a $end
$var reg 1 Y b $end
$upscope $end
$scope module D2 $end
$var wire 1 % clk $end
$var wire 1 Z data_in $end
$var wire 1 M data_out $end
$var wire 1 J direction $end
$var wire 1 [ en $end
$var wire 1 ! io_port $end
$var reg 1 \ a $end
$var reg 1 ] b $end
$upscope $end
$scope module D3 $end
$var wire 1 % clk $end
$var wire 1 ^ data_in $end
$var wire 1 L data_out $end
$var wire 1 J direction $end
$var wire 1 _ en $end
$var wire 1 " io_port $end
$var reg 1 ` a $end
$var reg 1 a b $end
$upscope $end
$upscope $end
$scope module InstructionDecoder $end
$var wire 1 ; acu_zero $end
$var wire 8 b instr [7:0] $end
$var wire 2 c stack_flags [1:0] $end
$var reg 1 > acu_en $end
$var reg 1 8 io_en $end
$var reg 1 6 jmp_en $end
$var reg 1 5 ldi $end
$var reg 8 d op [7:0] $end
$var reg 1 2 r_or_w $end
$var reg 1 / rf_en $end
$var reg 1 , rst $end
$var reg 2 e stack_control [1:0] $end
$upscope $end
$scope module Mux_acu_rom $end
$var wire 16 f in1 [15:0] $end
$var wire 16 g in2 [15:0] $end
$var wire 1 5 sel $end
$var parameter 32 h WIDTH $end
$var reg 16 i out [15:0] $end
$upscope $end
$scope module Mux_rf_io $end
$var wire 16 j in2 [15:0] $end
$var wire 1 8 sel $end
$var wire 16 k in1 [15:0] $end
$var parameter 32 l WIDTH $end
$var reg 16 m out [15:0] $end
$upscope $end
$scope module ProgramCounter $end
$var wire 1 % clk $end
$var wire 8 n jmp_addr [7:0] $end
$var wire 1 6 jmp_en $end
$var wire 1 @ rst $end
$var reg 8 o pc [7:0] $end
$upscope $end
$scope module Registers $end
$var wire 1 % clk $end
$var wire 1 / en $end
$var wire 16 p in [15:0] $end
$var wire 1 2 r_or_w $end
$var wire 4 q reg_addr [3:0] $end
$var parameter 32 r REG_ADDR_BITS $end
$var parameter 32 s WIDTH $end
$var reg 16 t out [15:0] $end
$upscope $end
$scope module Rom $end
$var wire 8 u addr [7:0] $end
$var wire 1 % clk $end
$var parameter 32 v RAM_ADDR_BITS $end
$var parameter 32 w RAM_WORD_WIDTH $end
$var reg 24 x data [23:0] $end
$upscope $end
$scope module Stack $end
$var wire 1 % clk $end
$var wire 8 y data_in [7:0] $end
$var wire 1 ) pop $end
$var wire 1 ( push $end
$var wire 1 @ rst $end
$var wire 8 z data_out [7:0] $end
$var parameter 32 { DEPTH $end
$var parameter 32 | WIDTH $end
$var reg 1 + empty $end
$var reg 1 * full $end
$var reg 3 } top [2:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 |
b1000 {
b11000 w
b1000 v
b10000 s
b100 r
b10000 l
b10000 h
b10000 P
b10000 G
b10000 B
$end
#0
$dumpvars
b0 }
b0 z
b0 y
bx x
b0 u
b0 t
b0 q
b0 p
b0 o
bz n
b0 m
b0 k
b0 j
b0 i
bx g
b0 f
b0 e
b10100 d
b1 c
bx b
za
z`
0_
0^
z]
z\
0[
0Z
zY
zX
0W
0V
zU
zT
0S
0R
b0 Q
zO
zN
zM
zL
b0 K
0J
b0 I
bx H
b0 F
b0 E
b10100 D
b0 C
bx A
0@
b0 ?
0>
b0 =
b0 <
1;
bx :
x9
08
b0 7
06
05
b10100 4
b0 3
02
b0 1
b0 0
0/
b0 .
bx -
0,
1+
0*
0)
0(
b0 '
0&
1%
x$
x#
x"
x!
$end
#1000
b0 g
b10100 b
b1 3
b1 o
b1 u
b1 y
b101000000000000000000 -
b101000000000000000000 x
b1 '
0%
#2000
b10 '
1%
#3000
b0 :
b0 A
b0 H
1!
1[
b10 K
1>
18
b10001 4
b10001 D
b10001 d
b10 g
b10001 b
b100010000000000000010 -
b100010000000000000010 x
b10 3
b10 o
b10 u
b10 y
b11 '
0%
#4000
0\
1M
1]
b100 '
1%
#5000
b1 q
0>
1/
08
1J
12
b10000 4
b10000 D
b10000 d
b0 .
b0 E
b0 m
z#
0W
0[
b0 K
b1 g
b10000 b
b11 3
b11 o
b11 u
b11 y
b100000000000000000001 -
b100000000000000000001 x
b1 7
b1 Q
b1 j
b101 '
0%
#6000
b110 '
1%
#7000
b11 :
b11 A
b11 H
b11 <
b11 F
b11 i
1>
15
0/
0J
02
b10011 4
b10011 D
b10011 d
b0 q
b11 g
b10011 b
b0 7
b0 Q
b0 j
b100110000000000000011 -
b100110000000000000011 x
b100 3
b100 o
b100 u
b100 y
b111 '
0%
#8000
b1000 '
1%
#9000
b10 :
b10 A
b10 H
b11 <
b11 F
b11 i
05
b1000 4
b1000 D
b1000 d
b11 ?
b0 g
b1000 b
0;
1R
1V
1Z
1^
b101 3
b101 o
b101 u
b101 y
b10000000000000000000 -
b10000000000000000000 x
b11 =
b11 C
b11 I
b11 f
b11 p
b1001 '
0%
#10000
b1010 '
1%
#11000
0>
1/
1J
12
b10000 4
b10000 D
b10000 d
b10 <
b10 F
b10 i
b10 ?
0R
0V
0Z
0^
b10000 b
b10 =
b10 C
b10 I
b10 f
b10 p
b100000000000000000000 -
b100000000000000000000 x
b110 3
b110 o
b110 u
b110 y
b1011 '
0%
#12000
b1100 '
1%
#13000
b100 n
0/
0J
02
16
b1100 4
b1100 D
b1100 d
b0 q
b100 g
b1100 b
b111 3
b111 o
b111 u
b111 y
b11000000000000000100 -
b11000000000000000100 x
b1101 '
0%
#14000
b1110 '
1%
#15000
06
b10100 4
b10100 D
b10100 d
bz n
b0 g
b10100 b
b101000000000000000000 -
b101000000000000000000 x
b100 3
b100 o
b100 u
b100 y
b1111 '
0%
#16000
b10000 '
1%
#17000
b1 :
b1 A
b1 H
1>
b1000 4
b1000 D
b1000 d
b1000 b
b101 3
b101 o
b101 u
b101 y
b10000000000000000000 -
b10000000000000000000 x
b10001 '
0%
#18000
b10010 '
1%
#19000
0>
1/
1J
12
b10000 4
b10000 D
b10000 d
b1 <
b1 F
b1 i
b1 ?
1R
1V
1Z
1^
b10000 b
b1 =
b1 C
b1 I
b1 f
b1 p
b100000000000000000000 -
b100000000000000000000 x
b110 3
b110 o
b110 u
b110 y
b10011 '
0%
#20000
b10100 '
1%
#21000
b100 n
0/
0J
02
16
b1100 4
b1100 D
b1100 d
b0 q
b100 g
b1100 b
b111 3
b111 o
b111 u
b111 y
b11000000000000000100 -
b11000000000000000100 x
b10101 '
0%
#22000
b10110 '
1%
#23000
06
b10100 4
b10100 D
b10100 d
bz n
b0 g
b10100 b
b101000000000000000000 -
b101000000000000000000 x
b100 3
b100 o
b100 u
b100 y
b10111 '
0%
#24000
b11000 '
1%
#25000
b0 :
b0 A
b0 H
1>
b1000 4
b1000 D
b1000 d
b1000 b
b101 3
b101 o
b101 u
b101 y
b10000000000000000000 -
b10000000000000000000 x
b11001 '
0%
#26000
b11010 '
1%
#27000
0>
1/
1J
12
b10000 4
b10000 D
b10000 d
b0 <
b0 F
b0 i
b0 ?
1;
0R
0V
0Z
0^
b10000 b
b0 =
b0 C
b0 I
b0 f
b0 p
b100000000000000000000 -
b100000000000000000000 x
b110 3
b110 o
b110 u
b110 y
b11011 '
0%
#28000
b11100 '
1%
#29000
0/
0J
02
b1100 4
b1100 D
b1100 d
b0 q
b100 g
b1100 b
b111 3
b111 o
b111 u
b111 y
b11000000000000000100 -
b11000000000000000100 x
b11101 '
0%
#30000
b11110 '
1%
#31000
b10100 4
b10100 D
b10100 d
b0 g
b10100 b
b101000000000000000000 -
b101000000000000000000 x
b1000 3
b1000 o
b1000 u
b1000 y
b11111 '
0%
#32000
b100000 '
1%
#33000
1@
1,
b10101 4
b10101 D
b10101 d
b10101 b
b1001 3
b1001 o
b1001 u
b1001 y
b101010000000000000000 -
b101010000000000000000 x
b100001 '
0%
#34000
b100010 '
1%
#35000
0@
0,
b10100 4
b10100 D
b10100 d
bx g
bx b
bx -
bx x
b0 3
b0 o
b0 u
b0 y
b100011 '
0%
