// module rom(clk, addr, data_in, data_out, ce, we);
module rom(addr, data_out);

parameter RAM_WIDTH = 4;
parameter RAM_ADDR_BITS = 4;

// input clk;
// input ce; //Chip enable
// input we; //Write enable
input [RAM_ADDR_BITS-1 : 0] addr;
// input [RAM_WIDTH-1 : 0] data_in;
output reg [RAM_WIDTH-1 : 0] data_out

parameter NOT = 4'b0000;
parameter XOR = 4'b0001;
parameter OR  = 4'b0010;
parameter AND = 4'b0011;
parameter SUB = 4'b0100;
parameter ADD = 4'b0101;
parameter RR  = 4'b0110;
parameter RL  = 4'b0111;
parameter DEC = 4'b1000;
parameter INC = 4'b1001;
parameter LD  = 4'b1010;
parameter ST  = 4'b1011;
parameter NOP = 4'b1100;
parameter RST = 4'b1110;

reg [RAM_WIDTH-1:0] mem [(2**RAM_ADDR_BITS)-1:0];

// test
initial [0] mem [8:0] = INC;
initial [1] mem [8:0] = INC;
initial [2] mem [8:0] = INC;
initial [3] mem [8:0] = INC;
initial [4] mem [8:0] = INC;
initial [5] mem [8:0] = RST;

always @(*) begin
    case(addr)
        4'd0: data <= 
        4'd1: // xor
        4'd2: // or
        4'd3: // and
        4'd4: // sub
        4'd5: // add
        4'd6: // rr
        4'd7: // rl
        4'd8: // dec
        4'd9: // inc
        4'd10: // ld
        4'd11: // st
        4'd12: // nop
        4'd13: // nop
        4'd14: // rst
        4'd15: //rst
        default:// rst
    endcase
end

// always @(posedge clk)
//     if (ce) begin
//         if (we)
//             mem[addr] <= data_in;
//         data_out <= mem[addr];
// end

endmodule